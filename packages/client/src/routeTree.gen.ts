/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppWorkspacesImport } from './routes/app/workspaces'
import { Route as AppEditorIndexImport } from './routes/app/editor/index'
import { Route as AppEditorWorkspaceIdImport } from './routes/app/editor/$workspaceId'
import { Route as AppEditorWorkspaceIdProjectIdImport } from './routes/app/editor/$workspaceId.$projectId'
import { Route as AppEditorWorkspaceIdProjectIdEntryIdImport } from './routes/app/editor/$workspaceId.$projectId.$entryId'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppWorkspacesRoute = AppWorkspacesImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppEditorIndexRoute = AppEditorIndexImport.update({
  id: '/editor/',
  path: '/editor/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppEditorWorkspaceIdRoute = AppEditorWorkspaceIdImport.update({
  id: '/editor/$workspaceId',
  path: '/editor/$workspaceId',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppEditorWorkspaceIdProjectIdRoute =
  AppEditorWorkspaceIdProjectIdImport.update({
    id: '/$projectId',
    path: '/$projectId',
    getParentRoute: () => AppEditorWorkspaceIdRoute,
  } as any)

const AppEditorWorkspaceIdProjectIdEntryIdRoute =
  AppEditorWorkspaceIdProjectIdEntryIdImport.update({
    id: '/$entryId',
    path: '/$entryId',
    getParentRoute: () => AppEditorWorkspaceIdProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/workspaces': {
      id: '/app/workspaces'
      path: '/workspaces'
      fullPath: '/app/workspaces'
      preLoaderRoute: typeof AppWorkspacesImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/editor/$workspaceId': {
      id: '/app/editor/$workspaceId'
      path: '/editor/$workspaceId'
      fullPath: '/app/editor/$workspaceId'
      preLoaderRoute: typeof AppEditorWorkspaceIdImport
      parentRoute: typeof AppRouteImport
    }
    '/app/editor/': {
      id: '/app/editor/'
      path: '/editor'
      fullPath: '/app/editor'
      preLoaderRoute: typeof AppEditorIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/editor/$workspaceId/$projectId': {
      id: '/app/editor/$workspaceId/$projectId'
      path: '/$projectId'
      fullPath: '/app/editor/$workspaceId/$projectId'
      preLoaderRoute: typeof AppEditorWorkspaceIdProjectIdImport
      parentRoute: typeof AppEditorWorkspaceIdImport
    }
    '/app/editor/$workspaceId/$projectId/$entryId': {
      id: '/app/editor/$workspaceId/$projectId/$entryId'
      path: '/$entryId'
      fullPath: '/app/editor/$workspaceId/$projectId/$entryId'
      preLoaderRoute: typeof AppEditorWorkspaceIdProjectIdEntryIdImport
      parentRoute: typeof AppEditorWorkspaceIdProjectIdImport
    }
  }
}

// Create and export the route tree

interface AppEditorWorkspaceIdProjectIdRouteChildren {
  AppEditorWorkspaceIdProjectIdEntryIdRoute: typeof AppEditorWorkspaceIdProjectIdEntryIdRoute
}

const AppEditorWorkspaceIdProjectIdRouteChildren: AppEditorWorkspaceIdProjectIdRouteChildren =
  {
    AppEditorWorkspaceIdProjectIdEntryIdRoute:
      AppEditorWorkspaceIdProjectIdEntryIdRoute,
  }

const AppEditorWorkspaceIdProjectIdRouteWithChildren =
  AppEditorWorkspaceIdProjectIdRoute._addFileChildren(
    AppEditorWorkspaceIdProjectIdRouteChildren,
  )

interface AppEditorWorkspaceIdRouteChildren {
  AppEditorWorkspaceIdProjectIdRoute: typeof AppEditorWorkspaceIdProjectIdRouteWithChildren
}

const AppEditorWorkspaceIdRouteChildren: AppEditorWorkspaceIdRouteChildren = {
  AppEditorWorkspaceIdProjectIdRoute:
    AppEditorWorkspaceIdProjectIdRouteWithChildren,
}

const AppEditorWorkspaceIdRouteWithChildren =
  AppEditorWorkspaceIdRoute._addFileChildren(AppEditorWorkspaceIdRouteChildren)

interface AppRouteRouteChildren {
  AppWorkspacesRoute: typeof AppWorkspacesRoute
  AppIndexRoute: typeof AppIndexRoute
  AppEditorWorkspaceIdRoute: typeof AppEditorWorkspaceIdRouteWithChildren
  AppEditorIndexRoute: typeof AppEditorIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppWorkspacesRoute: AppWorkspacesRoute,
  AppIndexRoute: AppIndexRoute,
  AppEditorWorkspaceIdRoute: AppEditorWorkspaceIdRouteWithChildren,
  AppEditorIndexRoute: AppEditorIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/workspaces': typeof AppWorkspacesRoute
  '/app/': typeof AppIndexRoute
  '/app/editor/$workspaceId': typeof AppEditorWorkspaceIdRouteWithChildren
  '/app/editor': typeof AppEditorIndexRoute
  '/app/editor/$workspaceId/$projectId': typeof AppEditorWorkspaceIdProjectIdRouteWithChildren
  '/app/editor/$workspaceId/$projectId/$entryId': typeof AppEditorWorkspaceIdProjectIdEntryIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app/workspaces': typeof AppWorkspacesRoute
  '/app': typeof AppIndexRoute
  '/app/editor/$workspaceId': typeof AppEditorWorkspaceIdRouteWithChildren
  '/app/editor': typeof AppEditorIndexRoute
  '/app/editor/$workspaceId/$projectId': typeof AppEditorWorkspaceIdProjectIdRouteWithChildren
  '/app/editor/$workspaceId/$projectId/$entryId': typeof AppEditorWorkspaceIdProjectIdEntryIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/workspaces': typeof AppWorkspacesRoute
  '/app/': typeof AppIndexRoute
  '/app/editor/$workspaceId': typeof AppEditorWorkspaceIdRouteWithChildren
  '/app/editor/': typeof AppEditorIndexRoute
  '/app/editor/$workspaceId/$projectId': typeof AppEditorWorkspaceIdProjectIdRouteWithChildren
  '/app/editor/$workspaceId/$projectId/$entryId': typeof AppEditorWorkspaceIdProjectIdEntryIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/workspaces'
    | '/app/'
    | '/app/editor/$workspaceId'
    | '/app/editor'
    | '/app/editor/$workspaceId/$projectId'
    | '/app/editor/$workspaceId/$projectId/$entryId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app/workspaces'
    | '/app'
    | '/app/editor/$workspaceId'
    | '/app/editor'
    | '/app/editor/$workspaceId/$projectId'
    | '/app/editor/$workspaceId/$projectId/$entryId'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/workspaces'
    | '/app/'
    | '/app/editor/$workspaceId'
    | '/app/editor/'
    | '/app/editor/$workspaceId/$projectId'
    | '/app/editor/$workspaceId/$projectId/$entryId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/workspaces",
        "/app/",
        "/app/editor/$workspaceId",
        "/app/editor/"
      ]
    },
    "/app/workspaces": {
      "filePath": "app/workspaces.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/app/editor/$workspaceId": {
      "filePath": "app/editor/$workspaceId.tsx",
      "parent": "/app",
      "children": [
        "/app/editor/$workspaceId/$projectId"
      ]
    },
    "/app/editor/": {
      "filePath": "app/editor/index.tsx",
      "parent": "/app"
    },
    "/app/editor/$workspaceId/$projectId": {
      "filePath": "app/editor/$workspaceId.$projectId.tsx",
      "parent": "/app/editor/$workspaceId",
      "children": [
        "/app/editor/$workspaceId/$projectId/$entryId"
      ]
    },
    "/app/editor/$workspaceId/$projectId/$entryId": {
      "filePath": "app/editor/$workspaceId.$projectId.$entryId.tsx",
      "parent": "/app/editor/$workspaceId/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */

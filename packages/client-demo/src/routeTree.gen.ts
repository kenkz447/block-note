/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkspacesImport } from './routes/workspaces'
import { Route as IndexImport } from './routes/index'
import { Route as EditorIndexImport } from './routes/editor/index'
import { Route as EditorWorkspaceIdImport } from './routes/editor/$workspaceId'
import { Route as EditorWorkspaceIdProjectIdImport } from './routes/editor/$workspaceId.$projectId'
import { Route as EditorWorkspaceIdProjectIdEntryIdImport } from './routes/editor/$workspaceId.$projectId.$entryId'

// Create/Update Routes

const WorkspacesRoute = WorkspacesImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EditorIndexRoute = EditorIndexImport.update({
  id: '/editor/',
  path: '/editor/',
  getParentRoute: () => rootRoute,
} as any)

const EditorWorkspaceIdRoute = EditorWorkspaceIdImport.update({
  id: '/editor/$workspaceId',
  path: '/editor/$workspaceId',
  getParentRoute: () => rootRoute,
} as any)

const EditorWorkspaceIdProjectIdRoute = EditorWorkspaceIdProjectIdImport.update(
  {
    id: '/$projectId',
    path: '/$projectId',
    getParentRoute: () => EditorWorkspaceIdRoute,
  } as any,
)

const EditorWorkspaceIdProjectIdEntryIdRoute =
  EditorWorkspaceIdProjectIdEntryIdImport.update({
    id: '/$entryId',
    path: '/$entryId',
    getParentRoute: () => EditorWorkspaceIdProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesImport
      parentRoute: typeof rootRoute
    }
    '/editor/$workspaceId': {
      id: '/editor/$workspaceId'
      path: '/editor/$workspaceId'
      fullPath: '/editor/$workspaceId'
      preLoaderRoute: typeof EditorWorkspaceIdImport
      parentRoute: typeof rootRoute
    }
    '/editor/': {
      id: '/editor/'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorIndexImport
      parentRoute: typeof rootRoute
    }
    '/editor/$workspaceId/$projectId': {
      id: '/editor/$workspaceId/$projectId'
      path: '/$projectId'
      fullPath: '/editor/$workspaceId/$projectId'
      preLoaderRoute: typeof EditorWorkspaceIdProjectIdImport
      parentRoute: typeof EditorWorkspaceIdImport
    }
    '/editor/$workspaceId/$projectId/$entryId': {
      id: '/editor/$workspaceId/$projectId/$entryId'
      path: '/$entryId'
      fullPath: '/editor/$workspaceId/$projectId/$entryId'
      preLoaderRoute: typeof EditorWorkspaceIdProjectIdEntryIdImport
      parentRoute: typeof EditorWorkspaceIdProjectIdImport
    }
  }
}

// Create and export the route tree

interface EditorWorkspaceIdProjectIdRouteChildren {
  EditorWorkspaceIdProjectIdEntryIdRoute: typeof EditorWorkspaceIdProjectIdEntryIdRoute
}

const EditorWorkspaceIdProjectIdRouteChildren: EditorWorkspaceIdProjectIdRouteChildren =
  {
    EditorWorkspaceIdProjectIdEntryIdRoute:
      EditorWorkspaceIdProjectIdEntryIdRoute,
  }

const EditorWorkspaceIdProjectIdRouteWithChildren =
  EditorWorkspaceIdProjectIdRoute._addFileChildren(
    EditorWorkspaceIdProjectIdRouteChildren,
  )

interface EditorWorkspaceIdRouteChildren {
  EditorWorkspaceIdProjectIdRoute: typeof EditorWorkspaceIdProjectIdRouteWithChildren
}

const EditorWorkspaceIdRouteChildren: EditorWorkspaceIdRouteChildren = {
  EditorWorkspaceIdProjectIdRoute: EditorWorkspaceIdProjectIdRouteWithChildren,
}

const EditorWorkspaceIdRouteWithChildren =
  EditorWorkspaceIdRoute._addFileChildren(EditorWorkspaceIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRoute
  '/editor/$workspaceId': typeof EditorWorkspaceIdRouteWithChildren
  '/editor': typeof EditorIndexRoute
  '/editor/$workspaceId/$projectId': typeof EditorWorkspaceIdProjectIdRouteWithChildren
  '/editor/$workspaceId/$projectId/$entryId': typeof EditorWorkspaceIdProjectIdEntryIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRoute
  '/editor/$workspaceId': typeof EditorWorkspaceIdRouteWithChildren
  '/editor': typeof EditorIndexRoute
  '/editor/$workspaceId/$projectId': typeof EditorWorkspaceIdProjectIdRouteWithChildren
  '/editor/$workspaceId/$projectId/$entryId': typeof EditorWorkspaceIdProjectIdEntryIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRoute
  '/editor/$workspaceId': typeof EditorWorkspaceIdRouteWithChildren
  '/editor/': typeof EditorIndexRoute
  '/editor/$workspaceId/$projectId': typeof EditorWorkspaceIdProjectIdRouteWithChildren
  '/editor/$workspaceId/$projectId/$entryId': typeof EditorWorkspaceIdProjectIdEntryIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspaces'
    | '/editor/$workspaceId'
    | '/editor'
    | '/editor/$workspaceId/$projectId'
    | '/editor/$workspaceId/$projectId/$entryId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspaces'
    | '/editor/$workspaceId'
    | '/editor'
    | '/editor/$workspaceId/$projectId'
    | '/editor/$workspaceId/$projectId/$entryId'
  id:
    | '__root__'
    | '/'
    | '/workspaces'
    | '/editor/$workspaceId'
    | '/editor/'
    | '/editor/$workspaceId/$projectId'
    | '/editor/$workspaceId/$projectId/$entryId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspacesRoute: typeof WorkspacesRoute
  EditorWorkspaceIdRoute: typeof EditorWorkspaceIdRouteWithChildren
  EditorIndexRoute: typeof EditorIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspacesRoute: WorkspacesRoute,
  EditorWorkspaceIdRoute: EditorWorkspaceIdRouteWithChildren,
  EditorIndexRoute: EditorIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/workspaces",
        "/editor/$workspaceId",
        "/editor/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/workspaces": {
      "filePath": "workspaces.tsx"
    },
    "/editor/$workspaceId": {
      "filePath": "editor/$workspaceId.tsx",
      "children": [
        "/editor/$workspaceId/$projectId"
      ]
    },
    "/editor/": {
      "filePath": "editor/index.tsx"
    },
    "/editor/$workspaceId/$projectId": {
      "filePath": "editor/$workspaceId.$projectId.tsx",
      "parent": "/editor/$workspaceId",
      "children": [
        "/editor/$workspaceId/$projectId/$entryId"
      ]
    },
    "/editor/$workspaceId/$projectId/$entryId": {
      "filePath": "editor/$workspaceId.$projectId.$entryId.tsx",
      "parent": "/editor/$workspaceId/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
